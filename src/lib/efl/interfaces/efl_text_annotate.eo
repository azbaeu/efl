import eina_types;
import efl_text_types;

interface Efl.Text.Annotate {
   [[Cursor API

     @since 1.20
   ]]
   eo_prefix: efl_text;
   methods {
      // Annotation
      @property annotation {
         [[A new format for $annotation.

           This will replace the format applied by $annotation with $format.
           Assumes that $annotation is a handle for an existing annotation,
           i.e. one that was added using @.annotation_insert to this object.
           Otherwise, this will fail and return $false.

           @since 1.18
         ]]
         set {
            legacy: null;
            return: bool; [[$true on success, $false otherwise.]]
         }
         get {
            legacy: null;
         }
         keys {
            annotation: ptr(Efl.Text.Annotate.Annotation); [[Given annotation]]
         }
         values {
            format: string; [[The new format for the given annotation]]
         }
      }
      range_annotations_get {
         [[Returns an iterator of all the handles in a range.

           @since 1.18
         ]]
         legacy: null;
         params {
              @in start: ptr(const(Efl.Text.Cursor.Cursor)); [[Start of range]]
              @in end:   ptr(const(Efl.Text.Cursor.Cursor)); [[End of range]]
         }
         return: iterator<ptr(Efl.Text.Annotate.Annotation)> @owned; [[Handle of the Annotation]]
      }
      annotation_insert {
         [[Inserts an annotation format in a specified range [$start, $end - 1].

           The $format will be applied to the given range, and the $annotation
           handle will be returned for further handling.

           @since 1.18
         ]]
         legacy: null;
         params {
              @in start: ptr(Efl.Text.Cursor.Cursor); [[Start of range]]
              @in end:   ptr(Efl.Text.Cursor.Cursor); [[End of range]]
              @in format: string; [[Annotation format]]
         }
         return: ptr(Efl.Text.Annotate.Annotation); [[Handle of inserted annotation]]
      }
      annotation_del {
         [[Deletes given annotation.

           All formats applied by $annotation will be removed and it will be
           deleted.

           @since 1.18
         ]]
         legacy: null;
         params {
            @in annotation: ptr(Efl.Text.Annotate.Annotation); [[Annotation to be
                removed]]
         }
         return: bool; [[$true on success, $false otherwise.]]
      }
      annotation_positions_get {
         [[Sets given cursors to the start and end positions of the annotation.

           The cursors $start and $end will be set to the start and end
           positions of the given annotation $annotation.

           @since 1.18
         ]]
         legacy: null;
         params {
             @in annotation: ptr(const(Efl.Text.Annotate.Annotation)); [[Annotation
                 handle to query]]
             @in start: ptr(Efl.Text.Cursor.Cursor); [[Cursor to be set to the start
             position of the annotation in the text]]
             @in end: ptr(Efl.Text.Cursor.Cursor); [[Cursor to be set to the end
             position of the annotation in the text]]
         }
      }
      annotation_is_item {
         [[Whether this is an "item" type of annotation. Should be used before
           querying the annotation's geometry, as only "item" annotations have
           a geometry.

           @since 1.21
         ]]
         legacy: null;
         params {
            annotation: ptr(Efl.Text.Annotate.Annotation); [[Given annotation]]
         }
         return: bool; [[$true if given annotation is an object item, $false otherwise]]
      }
      // Cursor
      @property cursor_item_annotation {
         [[The object-item annotation at the cursor's position.]]
         get {
            legacy: null;
         }
         values {
            annotation: ptr(Efl.Text.Annotate.Annotation); [[Annotation]]
         }
         keys {
            cur: ptr(Efl.Text.Cursor.Cursor); [[Cursor object]]
         }
      }
   }
}

