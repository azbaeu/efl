import eina_types;

struct Eio.Data
{
  [[A structure to handle arbitrary data to be sent over Promises.]]
  data: void_ptr;
  size: uint;
}

class Efl.Io.Manager (Efl.Loop_User)
{
  [[Class representing an asynchronous file operation.]]

  methods {
    ls {
      [[Lists entries in a given path.]]
      params {
        @in path: string;
      }
      return: future<uint64, const(array<string>)>;
    }

    direct_ls {
      [[Lists entries in a given path with more information.]]
      params {
        @in path: string;
	@in recursive: bool;
      }
      return: future<uint64, const(array<Eina_File_Direct_Info>)>;
    }

    stat_ls {
      [[Lists entries in a given path with stat information.]]
      params {
        @in path: string;
	@in recursive: bool;
      }
      return: future<uint64, const(array<Eina_File_Direct_Info>)>;
    }

    // Extended attributes
    xattr_ls {
      [[Lists all extended attributes asynchronously.]]
      params {
         @in path: string;
      }
      return: future<uint64, const(array<string>)>;
    }

    stat {
      [[Get stat info on a given file/directory.]]
      params {
        @in path: string;
      }
      return: future<Eina_Stat>;
    }

    // FIXME: Add helper for Eina.Value to Xattr
    @property xattr {
      [[Retrieves or sets information of a given extended attribute.]]
      set {
         values {
	    data: Eina.Binbuf *;
            flags: Eina.Xattr.Flags;
         }
         return: future<uint64>;
      }
      get {
         return: future<Eina.Binbuf>;
      }
      keys {
         path: string;
	 attribute: string;
      }
    }

    // helper api
    open {
      [[Opens a file.

      The fulfilled value in the promise will be the Eina.File*.]]
      params {
        @in path: string;
        @in shared: bool;
      }
      return: future<Eina.File>;
    }
    close {
      [[Closes an open Eina.File.]]
      params {
        @in file: Eina.File*;
        // Here we're just interested whether the promise was fullfilled or not. No value needed.
      }
      return: future<int>;
    }
  }
}
